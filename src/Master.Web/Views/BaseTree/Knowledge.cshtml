@using Master.Web.Components
@{
    ViewData["Title"] = "Index";
}

<div class="layui-fluid" id="LAY-app-message">

    <div class="layui-card">
        <div class="layui-card-header bold"><i class="layui-icon layui-icon-next"></i>@L("知识树定义")</div>
        <div class="layui-card-body">
            <div class="layui-row layui-col-space10">
                <div class="layui-col-xs3">
                    <div class="LAY-app-message-btns" style="margin-bottom: 10px;">                        
                        <button class="layui-btn  layui-btn-sm" onclick="app.addNode()">添加知识体系</button>
                    </div>
                    <ul id="tree" class="ztree"
                        style="padding: 2px; border: 1px solid #ddd; overflow: auto;min-height:500px"></ul>
                </div>
                <div class="layui-col-xs9 ">
                    <div id="app" class="layui-hide" >
                        <blockquote class="layui-elem-quote" >{{title}}</blockquote>
                        <form class="layui-form layui-form-pane">
                            <input type="hidden" name="Id" v-model="currentItem.id" />
                            <div class="layui-form-item">
                                <div class="layui-inline">
                                    <label class="layui-form-label">{{nameStr}}</label>
                                    <div class="layui-input-block">
                                        <input type="text" v-model="currentItem.name" name="name" lay-verify="required" autocomplete="off" class="layui-input">
                                    </div>
                                </div>

                                <div class="layui-inline">
                                    <label class="layui-form-label">排序</label>
                                    <div class="layui-input-block">
                                        <input type="text" name="Sort" v-model="currentItem.sort" lay-verify="number" autocomplete="off" class="layui-input">
                                    </div>
                                </div>

                            </div>
                            <div class="layui-form-item" v-if="currentItem.parentId">
                                <div class="layui-inline">
                                    <label class="layui-form-label">上级节点</label>
                                    <div class="layui-input-block">
                                        <input type="text" :value="parentNodeName" autocomplete="off" class="layui-input" readonly>
                                    </div>
                                </div>

                                <div class="layui-inline">
                                    <label class="layui-form-label">归属体系</label>
                                    <div class="layui-input-block">
                                        <input type="text" :value="rootNodeName" autocomplete="off" class="layui-input" readonly>
                                    </div>
                                </div>

                            </div>
                            <div class="layui-form-item" pane="" v-if="currentItem.parentId">
                                <label class="layui-form-label">节点类型</label>
                                <div class="layui-input-block">
                                    <input type="radio" name="enableMultiSelect" value="0" title="单选" :checked="!currentItem.enableMultiSelect">
                                    <input type="radio" name="enableMultiSelect" value="1" title="多选" :checked="currentItem.enableMultiSelect">
                                </div>
                            </div>
                            <div class="layui-form-item layui-form-text" v-if="!currentItem.parentId">
                                <label class="layui-form-label">说明</label>
                                <div class="layui-input-block">
                                    <textarea placeholder="" class="layui-textarea" name="remarks" v-model="currentItem.remarks"></textarea>
                                </div>
                            </div>


                            <div class="layui-form-item">
                                <button v-if="currentItem.id" class="layui-btn layui-btn-normal" type="button" @@click="addNode(currentItem.id)">添加子节点</button>
                                <button class="layui-btn" type="button" @@click="doSave">@L("保存")</button>
                                <button v-if="!isAdd" class="layui-btn layui-btn-danger" @@click="doDelete" type="button">@L("删除")</button>
                            </div>
                            @*<vc:form-submit param="@(new FormSubmitViewParam() { ModuleKey="Organization",ButtonKey="Submit",Callback="submitCallback"})"></vc:form-submit>*@
                            @*<div class="layui-form-item">
            <div class="layui-input-block">
                <button class="layui-btn" type="button" lay-submit="" lay-filter="submit">提交</button>
            </div>
        </div>*@
                        </form>
                    </div>


                </div>
            </div>

        </div>

    </div>
</div>

@section scripts{
    <script>
        var app,nodes;
        var searchKeys = {};
        var ztree = function () {
            var zTreeObj;
            var setting = {
                view: { selectedMulti: false },
                data: {
                    key: {
                        name: 'name',
                        title: 'name'
                    },
                    simpleData: {
                        enable: true,
                        idKey: 'id',
                        pIdKey: 'parentId',
                        rootPId: null
                    }
                },
                callback: {
                    onClick: function (event, treeId, treeNode) {
                        app.currentItem = treeNode;
                        refresh();
                        //searchKeys.parentId = treeNode.id;
                        //config.reloadTable();
                    }
                }
            };
            var load = function () {
                abp.services.app.baseTree.getKnowledgeTreeJsonByParentId().done(function (json) {
                    nodes = json;
                    zTreeObj = $.fn.zTree.init($("#tree"), setting);
                    //var newNode = { briefName: "根节点", id: null, parentId: "" };
                    //json.push(newNode);
                    zTreeObj.addNodes(null, json);
                    //mainList({ orgId: "" });
                    zTreeObj.expandAll(true);
                });
                //$.getJSON(url, function (json) {
                //    zTreeObj = $.fn.zTree.init($("#tree"), setting);
                //    var newNode = { Name: "根节点", Id: null, ParentId: "" };
                //    json.push(newNode);
                //    zTreeObj.addNodes(null, json);
                //    //mainList({ orgId: "" });
                //    zTreeObj.expandAll(true);
                //});
            };
            load();
            return {
                reload: load
            };
        }();
        config.ready = function () {
            layui.form.on("radio", function (data) {
                console.log(1);
                app.currentItem.enableMultiSelect = data.value == 1;
            })
            //$("#tree").height($("div.layui-table-view").height());
            app = new Vue({
                el: '#app',
                data: {
                    currentItem: {
                        id: 0,
                        parentId:null
                    }
                },
                computed: {
                    isAdd: function () {
                        return this.currentItem.id==0;
                    },
                    title: function () {
                        if (this.isAdd) { return "添加节点"; }
                        else { return "修改节点 "+this.currentItem.displayName; }
                    },
                    nameStr: function () {
                        return this.currentItem.parentId == null ? "体系名称" : "名称";
                    },
                    parentNode: function () {
                        var that = this;
                        return nodes.filter(function (o) { return o.id == that.currentItem.parentId })[0];
                    },
                    parentNodeName: function () {                        
                        return this.parentNode.parentId == null ? "根" : this.parentNode.name;
                    },
                    rootNodeName: function () {
                        var that = this;
                        return nodes.filter(function (o) { return o.code == that.parentNode.code.split('.')[0] })[0].name;
                    }

                },
                methods: {
                    addNode: function (parentId) {
                        this.currentItem = { id: 0, parentId: parentId, treeNodeType: 0 };
                        refresh();
                    },
                    doSave: function () {
                        if (!this.currentItem.name) {
                            abp.message.error("请输入名称");
                            return false;
                        }
                        abp.message.confirm("确认提交?", function () {
                            abp.services.app.baseTree.submit(app.currentItem).done(function () {
                                layer.msg("提交成功");
                                config.refresh();
                            })
                        })
                        
                    },
                    doAdd: function () {
                        this.currentItem = { id: 0,parentId:null };
                        $("#userDiv").hide();
                    },
                    doDelete: function () {
                        var that = this;
                        abp.message.confirm('确认删除节点[' + this.currentItem.name + "]?子节点也将被删除", function () {
                            func.runAsync(abp.services.app.baseTree.deleteEntity([that.currentItem.id])
                                .done(function (data) {
                                    layer.msg("提交成功");
                                    config.refresh();
                                }));

                        })

                    }

                },
                mounted: function () {
                    $("#app").removeClass("layui-hide");
                    this.doAdd();
                }

            });

        };
        config.refresh = function () {
            ztree.reload();
            app.addNode(app.currentItem.parentId);
        };
        config.reloadTable = function () {


        }
        function refresh() {
            Vue.nextTick(function () {
                layui.form.render();
            })
        }
    </script>
}

